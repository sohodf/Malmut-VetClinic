//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Vet_Clinic.SendSmsWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SendSmsWSSoap", Namespace="http://www.telemessersms.co.il/webservice/")]
    public partial class SendSmsWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback IsSmsAllowedInThisScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCellPhoneOperatorOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessagesCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessagesDeliveryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessagesDeliveryBySendIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserRulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserRulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsWithDynamicDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMultiSmsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMultiSmsWithExtRefOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsWithIconsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsWithExtRefOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsWithExtRefLightOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsWithExtRefLightUnicodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsWithSumOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsArrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlacklistOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SendSmsWS() {
            this.Url = global::Vet_Clinic.Properties.Settings.Default.Vet_Clinic_SendSmsWS_SendSmsWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event IsSmsAllowedInThisScheduleCompletedEventHandler IsSmsAllowedInThisScheduleCompleted;
        
        /// <remarks/>
        public event GetCellPhoneOperatorCompletedEventHandler GetCellPhoneOperatorCompleted;
        
        /// <remarks/>
        public event GetMessagesCreditCompletedEventHandler GetMessagesCreditCompleted;
        
        /// <remarks/>
        public event GetMessagesDeliveryCompletedEventHandler GetMessagesDeliveryCompleted;
        
        /// <remarks/>
        public event GetMessagesDeliveryBySendIdCompletedEventHandler GetMessagesDeliveryBySendIdCompleted;
        
        /// <remarks/>
        public event GetUserRulesCompletedEventHandler GetUserRulesCompleted;
        
        /// <remarks/>
        public event UpdateUserRulesCompletedEventHandler UpdateUserRulesCompleted;
        
        /// <remarks/>
        public event SendSmsWithDynamicDataCompletedEventHandler SendSmsWithDynamicDataCompleted;
        
        /// <remarks/>
        public event SendMultiSmsCompletedEventHandler SendMultiSmsCompleted;
        
        /// <remarks/>
        public event SendMultiSmsWithExtRefCompletedEventHandler SendMultiSmsWithExtRefCompleted;
        
        /// <remarks/>
        public event SendSmsCompletedEventHandler SendSmsCompleted;
        
        /// <remarks/>
        public event SendSmsWithIconsCompletedEventHandler SendSmsWithIconsCompleted;
        
        /// <remarks/>
        public event SendSmsWithExtRefCompletedEventHandler SendSmsWithExtRefCompleted;
        
        /// <remarks/>
        public event SendSmsWithExtRefLightCompletedEventHandler SendSmsWithExtRefLightCompleted;
        
        /// <remarks/>
        public event SendSmsWithExtRefLightUnicodeCompletedEventHandler SendSmsWithExtRefLightUnicodeCompleted;
        
        /// <remarks/>
        public event SendSmsWithSumCompletedEventHandler SendSmsWithSumCompleted;
        
        /// <remarks/>
        public event GetGroupsCompletedEventHandler GetGroupsCompleted;
        
        /// <remarks/>
        public event SendSmsArrayCompletedEventHandler SendSmsArrayCompleted;
        
        /// <remarks/>
        public event GetTokenCompletedEventHandler GetTokenCompleted;
        
        /// <remarks/>
        public event SendSmsWithTokenCompletedEventHandler SendSmsWithTokenCompleted;
        
        /// <remarks/>
        public event GetBlacklistCompletedEventHandler GetBlacklistCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/IsSmsAllowedInThisSchedule", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result IsSmsAllowedInThisSchedule(string UserName, string EncryptPassword, int DeliveryDelayInMinutes) {
            object[] results = this.Invoke("IsSmsAllowedInThisSchedule", new object[] {
                        UserName,
                        EncryptPassword,
                        DeliveryDelayInMinutes});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void IsSmsAllowedInThisScheduleAsync(string UserName, string EncryptPassword, int DeliveryDelayInMinutes) {
            this.IsSmsAllowedInThisScheduleAsync(UserName, EncryptPassword, DeliveryDelayInMinutes, null);
        }
        
        /// <remarks/>
        public void IsSmsAllowedInThisScheduleAsync(string UserName, string EncryptPassword, int DeliveryDelayInMinutes, object userState) {
            if ((this.IsSmsAllowedInThisScheduleOperationCompleted == null)) {
                this.IsSmsAllowedInThisScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsSmsAllowedInThisScheduleOperationCompleted);
            }
            this.InvokeAsync("IsSmsAllowedInThisSchedule", new object[] {
                        UserName,
                        EncryptPassword,
                        DeliveryDelayInMinutes}, this.IsSmsAllowedInThisScheduleOperationCompleted, userState);
        }
        
        private void OnIsSmsAllowedInThisScheduleOperationCompleted(object arg) {
            if ((this.IsSmsAllowedInThisScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsSmsAllowedInThisScheduleCompleted(this, new IsSmsAllowedInThisScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/GetCellPhoneOperator", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCellPhoneOperator(string UserName, string EncryptPassword, string CellPhone) {
            object[] results = this.Invoke("GetCellPhoneOperator", new object[] {
                        UserName,
                        EncryptPassword,
                        CellPhone});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCellPhoneOperatorAsync(string UserName, string EncryptPassword, string CellPhone) {
            this.GetCellPhoneOperatorAsync(UserName, EncryptPassword, CellPhone, null);
        }
        
        /// <remarks/>
        public void GetCellPhoneOperatorAsync(string UserName, string EncryptPassword, string CellPhone, object userState) {
            if ((this.GetCellPhoneOperatorOperationCompleted == null)) {
                this.GetCellPhoneOperatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCellPhoneOperatorOperationCompleted);
            }
            this.InvokeAsync("GetCellPhoneOperator", new object[] {
                        UserName,
                        EncryptPassword,
                        CellPhone}, this.GetCellPhoneOperatorOperationCompleted, userState);
        }
        
        private void OnGetCellPhoneOperatorOperationCompleted(object arg) {
            if ((this.GetCellPhoneOperatorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCellPhoneOperatorCompleted(this, new GetCellPhoneOperatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/GetMessagesCredit", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMessagesCredit(string UserName, string EncryptPassword) {
            object[] results = this.Invoke("GetMessagesCredit", new object[] {
                        UserName,
                        EncryptPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessagesCreditAsync(string UserName, string EncryptPassword) {
            this.GetMessagesCreditAsync(UserName, EncryptPassword, null);
        }
        
        /// <remarks/>
        public void GetMessagesCreditAsync(string UserName, string EncryptPassword, object userState) {
            if ((this.GetMessagesCreditOperationCompleted == null)) {
                this.GetMessagesCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessagesCreditOperationCompleted);
            }
            this.InvokeAsync("GetMessagesCredit", new object[] {
                        UserName,
                        EncryptPassword}, this.GetMessagesCreditOperationCompleted, userState);
        }
        
        private void OnGetMessagesCreditOperationCompleted(object arg) {
            if ((this.GetMessagesCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessagesCreditCompleted(this, new GetMessagesCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/GetMessagesDelivery", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result GetMessagesDelivery(string UserName, string EncryptPassword, string MessagesID) {
            object[] results = this.Invoke("GetMessagesDelivery", new object[] {
                        UserName,
                        EncryptPassword,
                        MessagesID});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessagesDeliveryAsync(string UserName, string EncryptPassword, string MessagesID) {
            this.GetMessagesDeliveryAsync(UserName, EncryptPassword, MessagesID, null);
        }
        
        /// <remarks/>
        public void GetMessagesDeliveryAsync(string UserName, string EncryptPassword, string MessagesID, object userState) {
            if ((this.GetMessagesDeliveryOperationCompleted == null)) {
                this.GetMessagesDeliveryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessagesDeliveryOperationCompleted);
            }
            this.InvokeAsync("GetMessagesDelivery", new object[] {
                        UserName,
                        EncryptPassword,
                        MessagesID}, this.GetMessagesDeliveryOperationCompleted, userState);
        }
        
        private void OnGetMessagesDeliveryOperationCompleted(object arg) {
            if ((this.GetMessagesDeliveryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessagesDeliveryCompleted(this, new GetMessagesDeliveryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/GetMessagesDeliveryBySendId", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result GetMessagesDeliveryBySendId(string UserName, string EncryptPassword, string SendId, int InLastXDays) {
            object[] results = this.Invoke("GetMessagesDeliveryBySendId", new object[] {
                        UserName,
                        EncryptPassword,
                        SendId,
                        InLastXDays});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessagesDeliveryBySendIdAsync(string UserName, string EncryptPassword, string SendId, int InLastXDays) {
            this.GetMessagesDeliveryBySendIdAsync(UserName, EncryptPassword, SendId, InLastXDays, null);
        }
        
        /// <remarks/>
        public void GetMessagesDeliveryBySendIdAsync(string UserName, string EncryptPassword, string SendId, int InLastXDays, object userState) {
            if ((this.GetMessagesDeliveryBySendIdOperationCompleted == null)) {
                this.GetMessagesDeliveryBySendIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessagesDeliveryBySendIdOperationCompleted);
            }
            this.InvokeAsync("GetMessagesDeliveryBySendId", new object[] {
                        UserName,
                        EncryptPassword,
                        SendId,
                        InLastXDays}, this.GetMessagesDeliveryBySendIdOperationCompleted, userState);
        }
        
        private void OnGetMessagesDeliveryBySendIdOperationCompleted(object arg) {
            if ((this.GetMessagesDeliveryBySendIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessagesDeliveryBySendIdCompleted(this, new GetMessagesDeliveryBySendIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/GetUserRules", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserRule[] GetUserRules(string UserName, string EncryptPassword) {
            object[] results = this.Invoke("GetUserRules", new object[] {
                        UserName,
                        EncryptPassword});
            return ((UserRule[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserRulesAsync(string UserName, string EncryptPassword) {
            this.GetUserRulesAsync(UserName, EncryptPassword, null);
        }
        
        /// <remarks/>
        public void GetUserRulesAsync(string UserName, string EncryptPassword, object userState) {
            if ((this.GetUserRulesOperationCompleted == null)) {
                this.GetUserRulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserRulesOperationCompleted);
            }
            this.InvokeAsync("GetUserRules", new object[] {
                        UserName,
                        EncryptPassword}, this.GetUserRulesOperationCompleted, userState);
        }
        
        private void OnGetUserRulesOperationCompleted(object arg) {
            if ((this.GetUserRulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserRulesCompleted(this, new GetUserRulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/UpdateUserRules", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result UpdateUserRules(string UserName, string EncryptPassword, UserRule[] UserRules) {
            object[] results = this.Invoke("UpdateUserRules", new object[] {
                        UserName,
                        EncryptPassword,
                        UserRules});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateUserRulesAsync(string UserName, string EncryptPassword, UserRule[] UserRules) {
            this.UpdateUserRulesAsync(UserName, EncryptPassword, UserRules, null);
        }
        
        /// <remarks/>
        public void UpdateUserRulesAsync(string UserName, string EncryptPassword, UserRule[] UserRules, object userState) {
            if ((this.UpdateUserRulesOperationCompleted == null)) {
                this.UpdateUserRulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserRulesOperationCompleted);
            }
            this.InvokeAsync("UpdateUserRules", new object[] {
                        UserName,
                        EncryptPassword,
                        UserRules}, this.UpdateUserRulesOperationCompleted, userState);
        }
        
        private void OnUpdateUserRulesOperationCompleted(object arg) {
            if ((this.UpdateUserRulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserRulesCompleted(this, new UpdateUserRulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/SendSmsWithDynamicData", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result SendSmsWithDynamicData(string UserName, string EncryptPassword, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, string Message, string[] PlaceHolders, DynamicData[] dynamicData, string SendId) {
            object[] results = this.Invoke("SendSmsWithDynamicData", new object[] {
                        UserName,
                        EncryptPassword,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes,
                        Message,
                        PlaceHolders,
                        dynamicData,
                        SendId});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsWithDynamicDataAsync(string UserName, string EncryptPassword, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, string Message, string[] PlaceHolders, DynamicData[] dynamicData, string SendId) {
            this.SendSmsWithDynamicDataAsync(UserName, EncryptPassword, SenderName, DeliveryDelayInMinutes, ExpirationDelayInMinutes, Message, PlaceHolders, dynamicData, SendId, null);
        }
        
        /// <remarks/>
        public void SendSmsWithDynamicDataAsync(string UserName, string EncryptPassword, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, string Message, string[] PlaceHolders, DynamicData[] dynamicData, string SendId, object userState) {
            if ((this.SendSmsWithDynamicDataOperationCompleted == null)) {
                this.SendSmsWithDynamicDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsWithDynamicDataOperationCompleted);
            }
            this.InvokeAsync("SendSmsWithDynamicData", new object[] {
                        UserName,
                        EncryptPassword,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes,
                        Message,
                        PlaceHolders,
                        dynamicData,
                        SendId}, this.SendSmsWithDynamicDataOperationCompleted, userState);
        }
        
        private void OnSendSmsWithDynamicDataOperationCompleted(object arg) {
            if ((this.SendSmsWithDynamicDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsWithDynamicDataCompleted(this, new SendSmsWithDynamicDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/SendMultiSms", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result SendMultiSms(string UserName, string EncryptPassword, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, message[] messages) {
            object[] results = this.Invoke("SendMultiSms", new object[] {
                        UserName,
                        EncryptPassword,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes,
                        messages});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void SendMultiSmsAsync(string UserName, string EncryptPassword, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, message[] messages) {
            this.SendMultiSmsAsync(UserName, EncryptPassword, SenderName, DeliveryDelayInMinutes, ExpirationDelayInMinutes, messages, null);
        }
        
        /// <remarks/>
        public void SendMultiSmsAsync(string UserName, string EncryptPassword, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, message[] messages, object userState) {
            if ((this.SendMultiSmsOperationCompleted == null)) {
                this.SendMultiSmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMultiSmsOperationCompleted);
            }
            this.InvokeAsync("SendMultiSms", new object[] {
                        UserName,
                        EncryptPassword,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes,
                        messages}, this.SendMultiSmsOperationCompleted, userState);
        }
        
        private void OnSendMultiSmsOperationCompleted(object arg) {
            if ((this.SendMultiSmsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMultiSmsCompleted(this, new SendMultiSmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/SendMultiSmsWithExtRef", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result SendMultiSmsWithExtRef(string UserName, string EncryptPassword, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, message[] messages, string SendId) {
            object[] results = this.Invoke("SendMultiSmsWithExtRef", new object[] {
                        UserName,
                        EncryptPassword,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes,
                        messages,
                        SendId});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void SendMultiSmsWithExtRefAsync(string UserName, string EncryptPassword, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, message[] messages, string SendId) {
            this.SendMultiSmsWithExtRefAsync(UserName, EncryptPassword, SenderName, DeliveryDelayInMinutes, ExpirationDelayInMinutes, messages, SendId, null);
        }
        
        /// <remarks/>
        public void SendMultiSmsWithExtRefAsync(string UserName, string EncryptPassword, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, message[] messages, string SendId, object userState) {
            if ((this.SendMultiSmsWithExtRefOperationCompleted == null)) {
                this.SendMultiSmsWithExtRefOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMultiSmsWithExtRefOperationCompleted);
            }
            this.InvokeAsync("SendMultiSmsWithExtRef", new object[] {
                        UserName,
                        EncryptPassword,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes,
                        messages,
                        SendId}, this.SendMultiSmsWithExtRefOperationCompleted, userState);
        }
        
        private void OnSendMultiSmsWithExtRefOperationCompleted(object arg) {
            if ((this.SendMultiSmsWithExtRefCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMultiSmsWithExtRefCompleted(this, new SendMultiSmsWithExtRefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/SendSms", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result SendSms(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes) {
            object[] results = this.Invoke("SendSms", new object[] {
                        UserName,
                        EncryptPassword,
                        Subscribers,
                        Message,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsAsync(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes) {
            this.SendSmsAsync(UserName, EncryptPassword, Subscribers, Message, SenderName, DeliveryDelayInMinutes, ExpirationDelayInMinutes, null);
        }
        
        /// <remarks/>
        public void SendSmsAsync(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, object userState) {
            if ((this.SendSmsOperationCompleted == null)) {
                this.SendSmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsOperationCompleted);
            }
            this.InvokeAsync("SendSms", new object[] {
                        UserName,
                        EncryptPassword,
                        Subscribers,
                        Message,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes}, this.SendSmsOperationCompleted, userState);
        }
        
        private void OnSendSmsOperationCompleted(object arg) {
            if ((this.SendSmsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsCompleted(this, new SendSmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/SendSmsWithIcons", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result SendSmsWithIcons(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes) {
            object[] results = this.Invoke("SendSmsWithIcons", new object[] {
                        UserName,
                        EncryptPassword,
                        Subscribers,
                        Message,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsWithIconsAsync(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes) {
            this.SendSmsWithIconsAsync(UserName, EncryptPassword, Subscribers, Message, SenderName, DeliveryDelayInMinutes, ExpirationDelayInMinutes, null);
        }
        
        /// <remarks/>
        public void SendSmsWithIconsAsync(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, object userState) {
            if ((this.SendSmsWithIconsOperationCompleted == null)) {
                this.SendSmsWithIconsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsWithIconsOperationCompleted);
            }
            this.InvokeAsync("SendSmsWithIcons", new object[] {
                        UserName,
                        EncryptPassword,
                        Subscribers,
                        Message,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes}, this.SendSmsWithIconsOperationCompleted, userState);
        }
        
        private void OnSendSmsWithIconsOperationCompleted(object arg) {
            if ((this.SendSmsWithIconsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsWithIconsCompleted(this, new SendSmsWithIconsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/SendSmsWithExtRef", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result SendSmsWithExtRef(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, string SendId) {
            object[] results = this.Invoke("SendSmsWithExtRef", new object[] {
                        UserName,
                        EncryptPassword,
                        Subscribers,
                        Message,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes,
                        SendId});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsWithExtRefAsync(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, string SendId) {
            this.SendSmsWithExtRefAsync(UserName, EncryptPassword, Subscribers, Message, SenderName, DeliveryDelayInMinutes, ExpirationDelayInMinutes, SendId, null);
        }
        
        /// <remarks/>
        public void SendSmsWithExtRefAsync(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, string SendId, object userState) {
            if ((this.SendSmsWithExtRefOperationCompleted == null)) {
                this.SendSmsWithExtRefOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsWithExtRefOperationCompleted);
            }
            this.InvokeAsync("SendSmsWithExtRef", new object[] {
                        UserName,
                        EncryptPassword,
                        Subscribers,
                        Message,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes,
                        SendId}, this.SendSmsWithExtRefOperationCompleted, userState);
        }
        
        private void OnSendSmsWithExtRefOperationCompleted(object arg) {
            if ((this.SendSmsWithExtRefCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsWithExtRefCompleted(this, new SendSmsWithExtRefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/SendSmsWithExtRefLight", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result SendSmsWithExtRefLight(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, string SendId) {
            object[] results = this.Invoke("SendSmsWithExtRefLight", new object[] {
                        UserName,
                        EncryptPassword,
                        Subscribers,
                        Message,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes,
                        SendId});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsWithExtRefLightAsync(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, string SendId) {
            this.SendSmsWithExtRefLightAsync(UserName, EncryptPassword, Subscribers, Message, SenderName, DeliveryDelayInMinutes, ExpirationDelayInMinutes, SendId, null);
        }
        
        /// <remarks/>
        public void SendSmsWithExtRefLightAsync(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, string SendId, object userState) {
            if ((this.SendSmsWithExtRefLightOperationCompleted == null)) {
                this.SendSmsWithExtRefLightOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsWithExtRefLightOperationCompleted);
            }
            this.InvokeAsync("SendSmsWithExtRefLight", new object[] {
                        UserName,
                        EncryptPassword,
                        Subscribers,
                        Message,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes,
                        SendId}, this.SendSmsWithExtRefLightOperationCompleted, userState);
        }
        
        private void OnSendSmsWithExtRefLightOperationCompleted(object arg) {
            if ((this.SendSmsWithExtRefLightCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsWithExtRefLightCompleted(this, new SendSmsWithExtRefLightCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/SendSmsWithExtRefLightUnicode", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result SendSmsWithExtRefLightUnicode(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, string SendId) {
            object[] results = this.Invoke("SendSmsWithExtRefLightUnicode", new object[] {
                        UserName,
                        EncryptPassword,
                        Subscribers,
                        Message,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes,
                        SendId});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsWithExtRefLightUnicodeAsync(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, string SendId) {
            this.SendSmsWithExtRefLightUnicodeAsync(UserName, EncryptPassword, Subscribers, Message, SenderName, DeliveryDelayInMinutes, ExpirationDelayInMinutes, SendId, null);
        }
        
        /// <remarks/>
        public void SendSmsWithExtRefLightUnicodeAsync(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, string SendId, object userState) {
            if ((this.SendSmsWithExtRefLightUnicodeOperationCompleted == null)) {
                this.SendSmsWithExtRefLightUnicodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsWithExtRefLightUnicodeOperationCompleted);
            }
            this.InvokeAsync("SendSmsWithExtRefLightUnicode", new object[] {
                        UserName,
                        EncryptPassword,
                        Subscribers,
                        Message,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes,
                        SendId}, this.SendSmsWithExtRefLightUnicodeOperationCompleted, userState);
        }
        
        private void OnSendSmsWithExtRefLightUnicodeOperationCompleted(object arg) {
            if ((this.SendSmsWithExtRefLightUnicodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsWithExtRefLightUnicodeCompleted(this, new SendSmsWithExtRefLightUnicodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/SendSmsWithSum", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultWithSum SendSmsWithSum(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes) {
            object[] results = this.Invoke("SendSmsWithSum", new object[] {
                        UserName,
                        EncryptPassword,
                        Subscribers,
                        Message,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes});
            return ((ResultWithSum)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsWithSumAsync(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes) {
            this.SendSmsWithSumAsync(UserName, EncryptPassword, Subscribers, Message, SenderName, DeliveryDelayInMinutes, ExpirationDelayInMinutes, null);
        }
        
        /// <remarks/>
        public void SendSmsWithSumAsync(string UserName, string EncryptPassword, string Subscribers, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, object userState) {
            if ((this.SendSmsWithSumOperationCompleted == null)) {
                this.SendSmsWithSumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsWithSumOperationCompleted);
            }
            this.InvokeAsync("SendSmsWithSum", new object[] {
                        UserName,
                        EncryptPassword,
                        Subscribers,
                        Message,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes}, this.SendSmsWithSumOperationCompleted, userState);
        }
        
        private void OnSendSmsWithSumOperationCompleted(object arg) {
            if ((this.SendSmsWithSumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsWithSumCompleted(this, new SendSmsWithSumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/GetGroups", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetGroups(string UserName, string EncryptPassword) {
            object[] results = this.Invoke("GetGroups", new object[] {
                        UserName,
                        EncryptPassword});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetGroupsAsync(string UserName, string EncryptPassword) {
            this.GetGroupsAsync(UserName, EncryptPassword, null);
        }
        
        /// <remarks/>
        public void GetGroupsAsync(string UserName, string EncryptPassword, object userState) {
            if ((this.GetGroupsOperationCompleted == null)) {
                this.GetGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupsOperationCompleted);
            }
            this.InvokeAsync("GetGroups", new object[] {
                        UserName,
                        EncryptPassword}, this.GetGroupsOperationCompleted, userState);
        }
        
        private void OnGetGroupsOperationCompleted(object arg) {
            if ((this.GetGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupsCompleted(this, new GetGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/SendSmsArray", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result SendSmsArray(string UserName, string EncryptPassword, string Subscribers, string[] Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes) {
            object[] results = this.Invoke("SendSmsArray", new object[] {
                        UserName,
                        EncryptPassword,
                        Subscribers,
                        Message,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsArrayAsync(string UserName, string EncryptPassword, string Subscribers, string[] Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes) {
            this.SendSmsArrayAsync(UserName, EncryptPassword, Subscribers, Message, SenderName, DeliveryDelayInMinutes, ExpirationDelayInMinutes, null);
        }
        
        /// <remarks/>
        public void SendSmsArrayAsync(string UserName, string EncryptPassword, string Subscribers, string[] Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, object userState) {
            if ((this.SendSmsArrayOperationCompleted == null)) {
                this.SendSmsArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsArrayOperationCompleted);
            }
            this.InvokeAsync("SendSmsArray", new object[] {
                        UserName,
                        EncryptPassword,
                        Subscribers,
                        Message,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes}, this.SendSmsArrayOperationCompleted, userState);
        }
        
        private void OnSendSmsArrayOperationCompleted(object arg) {
            if ((this.SendSmsArrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsArrayCompleted(this, new SendSmsArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/GetToken", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TokenResult GetToken(string UserName, string Password) {
            object[] results = this.Invoke("GetToken", new object[] {
                        UserName,
                        Password});
            return ((TokenResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetTokenAsync(string UserName, string Password) {
            this.GetTokenAsync(UserName, Password, null);
        }
        
        /// <remarks/>
        public void GetTokenAsync(string UserName, string Password, object userState) {
            if ((this.GetTokenOperationCompleted == null)) {
                this.GetTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTokenOperationCompleted);
            }
            this.InvokeAsync("GetToken", new object[] {
                        UserName,
                        Password}, this.GetTokenOperationCompleted, userState);
        }
        
        private void OnGetTokenOperationCompleted(object arg) {
            if ((this.GetTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTokenCompleted(this, new GetTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/SendSmsWithToken", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result SendSmsWithToken(string Token, string Subscriber, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes) {
            object[] results = this.Invoke("SendSmsWithToken", new object[] {
                        Token,
                        Subscriber,
                        Message,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsWithTokenAsync(string Token, string Subscriber, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes) {
            this.SendSmsWithTokenAsync(Token, Subscriber, Message, SenderName, DeliveryDelayInMinutes, ExpirationDelayInMinutes, null);
        }
        
        /// <remarks/>
        public void SendSmsWithTokenAsync(string Token, string Subscriber, string Message, string SenderName, int DeliveryDelayInMinutes, int ExpirationDelayInMinutes, object userState) {
            if ((this.SendSmsWithTokenOperationCompleted == null)) {
                this.SendSmsWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsWithTokenOperationCompleted);
            }
            this.InvokeAsync("SendSmsWithToken", new object[] {
                        Token,
                        Subscriber,
                        Message,
                        SenderName,
                        DeliveryDelayInMinutes,
                        ExpirationDelayInMinutes}, this.SendSmsWithTokenOperationCompleted, userState);
        }
        
        private void OnSendSmsWithTokenOperationCompleted(object arg) {
            if ((this.SendSmsWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsWithTokenCompleted(this, new SendSmsWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.telemessersms.co.il/webservice/GetBlacklist", RequestNamespace="http://www.telemessersms.co.il/webservice/", ResponseNamespace="http://www.telemessersms.co.il/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BlacklistResult GetBlacklist(string UserName, string Password, int InLastXDays) {
            object[] results = this.Invoke("GetBlacklist", new object[] {
                        UserName,
                        Password,
                        InLastXDays});
            return ((BlacklistResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetBlacklistAsync(string UserName, string Password, int InLastXDays) {
            this.GetBlacklistAsync(UserName, Password, InLastXDays, null);
        }
        
        /// <remarks/>
        public void GetBlacklistAsync(string UserName, string Password, int InLastXDays, object userState) {
            if ((this.GetBlacklistOperationCompleted == null)) {
                this.GetBlacklistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlacklistOperationCompleted);
            }
            this.InvokeAsync("GetBlacklist", new object[] {
                        UserName,
                        Password,
                        InLastXDays}, this.GetBlacklistOperationCompleted, userState);
        }
        
        private void OnGetBlacklistOperationCompleted(object arg) {
            if ((this.GetBlacklistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlacklistCompleted(this, new GetBlacklistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.telemessersms.co.il/webservice/")]
    public partial class Result {
        
        private string resultField;
        
        private Message[] messagesField;
        
        /// <remarks/>
        public string result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public Message[] Messages {
            get {
                return this.messagesField;
            }
            set {
                this.messagesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.telemessersms.co.il/webservice/")]
    public partial class Message {
        
        private string idField;
        
        private string cliField;
        
        private string statusField;
        
        private string operatorField;
        
        private string textField;
        
        private System.DateTime createDateField;
        
        private string sendIdField;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Cli {
            get {
                return this.cliField;
            }
            set {
                this.cliField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string Operator {
            get {
                return this.operatorField;
            }
            set {
                this.operatorField = value;
            }
        }
        
        /// <remarks/>
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        public string SendId {
            get {
                return this.sendIdField;
            }
            set {
                this.sendIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.telemessersms.co.il/webservice/")]
    public partial class BlacklistItems {
        
        private string cliField;
        
        private System.DateTime insertDateField;
        
        /// <remarks/>
        public string Cli {
            get {
                return this.cliField;
            }
            set {
                this.cliField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime InsertDate {
            get {
                return this.insertDateField;
            }
            set {
                this.insertDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.telemessersms.co.il/webservice/")]
    public partial class BlacklistResult {
        
        private string resultField;
        
        private BlacklistItems[] itemsField;
        
        /// <remarks/>
        public string result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public BlacklistItems[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.telemessersms.co.il/webservice/")]
    public partial class TokenResult {
        
        private string tokenField;
        
        private System.DateTime expiredDateField;
        
        private string resultField;
        
        /// <remarks/>
        public string Token {
            get {
                return this.tokenField;
            }
            set {
                this.tokenField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ExpiredDate {
            get {
                return this.expiredDateField;
            }
            set {
                this.expiredDateField = value;
            }
        }
        
        /// <remarks/>
        public string result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.telemessersms.co.il/webservice/")]
    public partial class ResultWithSum {
        
        private string resultField;
        
        private int chargeMessagesField;
        
        private int countMessagesField;
        
        private Message[] messagesField;
        
        /// <remarks/>
        public string result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public int ChargeMessages {
            get {
                return this.chargeMessagesField;
            }
            set {
                this.chargeMessagesField = value;
            }
        }
        
        /// <remarks/>
        public int CountMessages {
            get {
                return this.countMessagesField;
            }
            set {
                this.countMessagesField = value;
            }
        }
        
        /// <remarks/>
        public Message[] Messages {
            get {
                return this.messagesField;
            }
            set {
                this.messagesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.telemessersms.co.il/webservice/")]
    public partial class message {
        
        private string textField;
        
        private string cliField;
        
        /// <remarks/>
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        public string Cli {
            get {
                return this.cliField;
            }
            set {
                this.cliField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.telemessersms.co.il/webservice/")]
    public partial class DynamicData {
        
        private string cliField;
        
        private string[] dataField;
        
        /// <remarks/>
        public string Cli {
            get {
                return this.cliField;
            }
            set {
                this.cliField = value;
            }
        }
        
        /// <remarks/>
        public string[] Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.telemessersms.co.il/webservice/")]
    public partial class UserRule {
        
        private int dayField;
        
        private int fromHourField;
        
        private int toHourField;
        
        /// <remarks/>
        public int Day {
            get {
                return this.dayField;
            }
            set {
                this.dayField = value;
            }
        }
        
        /// <remarks/>
        public int FromHour {
            get {
                return this.fromHourField;
            }
            set {
                this.fromHourField = value;
            }
        }
        
        /// <remarks/>
        public int ToHour {
            get {
                return this.toHourField;
            }
            set {
                this.toHourField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void IsSmsAllowedInThisScheduleCompletedEventHandler(object sender, IsSmsAllowedInThisScheduleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsSmsAllowedInThisScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsSmsAllowedInThisScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCellPhoneOperatorCompletedEventHandler(object sender, GetCellPhoneOperatorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCellPhoneOperatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCellPhoneOperatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetMessagesCreditCompletedEventHandler(object sender, GetMessagesCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessagesCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessagesCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetMessagesDeliveryCompletedEventHandler(object sender, GetMessagesDeliveryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessagesDeliveryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessagesDeliveryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetMessagesDeliveryBySendIdCompletedEventHandler(object sender, GetMessagesDeliveryBySendIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessagesDeliveryBySendIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessagesDeliveryBySendIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetUserRulesCompletedEventHandler(object sender, GetUserRulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserRulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserRulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserRule[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserRule[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateUserRulesCompletedEventHandler(object sender, UpdateUserRulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUserRulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateUserRulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendSmsWithDynamicDataCompletedEventHandler(object sender, SendSmsWithDynamicDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsWithDynamicDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsWithDynamicDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendMultiSmsCompletedEventHandler(object sender, SendMultiSmsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMultiSmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMultiSmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendMultiSmsWithExtRefCompletedEventHandler(object sender, SendMultiSmsWithExtRefCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMultiSmsWithExtRefCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMultiSmsWithExtRefCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendSmsCompletedEventHandler(object sender, SendSmsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendSmsWithIconsCompletedEventHandler(object sender, SendSmsWithIconsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsWithIconsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsWithIconsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendSmsWithExtRefCompletedEventHandler(object sender, SendSmsWithExtRefCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsWithExtRefCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsWithExtRefCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendSmsWithExtRefLightCompletedEventHandler(object sender, SendSmsWithExtRefLightCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsWithExtRefLightCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsWithExtRefLightCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendSmsWithExtRefLightUnicodeCompletedEventHandler(object sender, SendSmsWithExtRefLightUnicodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsWithExtRefLightUnicodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsWithExtRefLightUnicodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendSmsWithSumCompletedEventHandler(object sender, SendSmsWithSumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsWithSumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsWithSumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultWithSum Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultWithSum)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetGroupsCompletedEventHandler(object sender, GetGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendSmsArrayCompletedEventHandler(object sender, SendSmsArrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetTokenCompletedEventHandler(object sender, GetTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TokenResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TokenResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendSmsWithTokenCompletedEventHandler(object sender, SendSmsWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetBlacklistCompletedEventHandler(object sender, GetBlacklistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlacklistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlacklistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BlacklistResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BlacklistResult)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591